name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - .github/workflows/cicd.yaml
      - README.md
      - k8s/deployment.yaml
  pull_request:
    branches: [ main ]

jobs:
  test: 
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci 

      - name: Run Tests
        run: npm test || echo 'No tests found'

  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint 
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with: 
          node-version: '24'
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Build Application
        run : npm run build 
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
  containerize:
    name: Containerize Application
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    
    steps: 
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
        
      - name: Extract sha for Docker tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            latest
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
      
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: set image outputs
        id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

  update-kube:
    name: Update Kubernetes Deployment 
    runs-on: ubuntu-latest
    needs: [containerize]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps: 
      - name: Checkout Code
        uses: actions/checkout@v4
        with: 
          token: ${{ secrets.TOKEN }}
      
      - name: setup GIT config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Update Deployment YAML
        env: 
          IMAGE_TAG: sha-${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          # Update the image tag in the deployment file 
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"

          # Use sed to replace the image tag in the deployment file
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" k8s/deployment.yaml
        
          # verify the changes
          echo "Updated deployment to use image: $(NEW_IMAGE)"
          grep -A 1 "image:" k8s/deployment.yaml
      
      - name: Commit and Push changes
        run: | 
          git add k8s/deployment.yaml
          git commit -m "Update deployment with the new image tag: ${{needs.containerize.outputs.image_tag}} [skip ci]" || echo "No changes to commit"
          git push
          